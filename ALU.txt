LIBRARY IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;

ENTITY ALU IS
	PORT(
		Ain :  IN  STD_LOGIC_VECTOR(31 DOWNTO 0); -- INPUTS A/B from Data Path
		Bin :  IN  STD_LOGIC_VECTOR(31 DOWNTO 0); 
		ADDop : IN STD_LOGIC; -- Following are Operation signals -> when 1 they will activate their component and do necessary computations
		SUBop : IN STD_LOGIC;
		MULop : IN STD_LOGIC; 
		DIVop : IN STD_LOGIC;
		SHRop : IN STD_LOGIC;
		SHLop : IN STD_LOGIC;
		ROTRop : IN STD_LOGIC; 
		ROTLop : IN STD_LOGIC;
		ANDop : IN STD_LOGIC;
		ORop : IN STD_LOGIC;
		NEGop : IN STD_LOGIC; 
		NOTop : IN STD_LOGIC;
		IncPCop : IN STD_LOGIC; -- signal to increment PC counter within ALU
		ALU_Output :  OUT STD_LOGIC_VECTOR(63 DOWNTO 0) -- Z holds the results of the operation on A/B and will drive the bus --> must be 64b for MUL
		);
END ENTITY ALU;

ARCHITECTURE behavioural OF ALU IS
	-- creating component for each operation --> DO WE STILL NEED ADD/SUB/PCInc/AND/OR/NEG/NOT based on email ????	
	COMPONENT ALU_MUL IS -- Booth 
		PORT(dA	: STD_LOGIC_VECTOR(31 DOWNTO 0);
		     dB  : STD_LOGIC_VECTOR(31 DOWNTO 0);
		     product: STD_LOGIC_VECTOR(63 DOWNTO 0) -- booth uses double the bits as result
		     );
	END COMPONENT ALU_MUL;

	COMPONENT ALU_DIV IS
		PORT(dividend	: STD_LOGIC_VECTOR(31 DOWNTO 0);
			  divisor  : STD_LOGIC_VECTOR(31 DOWNTO 0);
			  quotient: STD_LOGIC_VECTOR(31 DOWNTO 0);
			  remainder: STD_LOGIC_VECTOR(31 DOWNTO 0)
		     );
	END COMPONENT ALU_DIV;

-- Define Required Signals for Architecture --> all the outputs should be mapped to proper components

SIGNAL Mul32b_output : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL Div32b_output : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL Div32b_remainder : STD_LOGIC_VECTOR(31 DOWNTO 0); -- must return quotient/remainder
-- Now begins start of architecture
BEGIN
-- Instantiate The Components -> map their ports to ALU local signals -> which will be mapped to ports of ALU
	ALU_Mul32b_inst			:	ALU_MUL PORT MAP(dA => Ain, dB => Bin, product => Mul32b_output);
	ALU_Div32b_inst  			:	ALU_DIV PORT MAP(dividend => Ain, divisor => Bin, quotient => Div32b_output, remainder => Div32b_remainder);
-- Sensitivity List Then Evaluate What Signal Was Called WHich Will Then Ac tivate The Proper Component And Return A Single Output
	ALU_proc	: PROCESS(Ain, Bin, ADDop, SUBop, MULop, DIVop, SHRop, SHLop, ROTRop, ROTLop, ANDop, ORop, NEGop, NOTop, IncPCop)
		BEGIN
			IF ADDop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0'); 
				ALU_Output(31 DOWNTO 0) <= (Ain + Bin); 
			ELSIF SUBop  = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= (Ain - Bin);
			ELSIF MULop = '1' THEN
				ALU_Output <= Mul32b_output; -- all 64b are used so full output is assigned
			ELSIF DIVop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= Div32b_output; -- all 64b are used to separate quotient from remainder
				ALU_Output(31 DOWNTO 0) <= Div32b_remainder;
			ELSIF SHRop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= Ain srl Bin;-- shift logical left bits of dA distance of bits dB (dB ranges 0-32b) ; -- most conditions are assigned to signals that are mapped to components
			ELSIF SHLop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= Ain sll Bin; -- shift logical left bits of dA distance of bits dB (dB ranges 0-32b)
			ELSIF ROTRop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= Ain ror Bin;
			ELSIF ROTLop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= Ain rol Bin;
			ELSIF ANDop  = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0'); 
				ALU_Output(31 DOWNTO 0)  <= Ain AND Bin; -- using built in operations
			ELSIF ORop = '1' THEN 
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= Ain OR Bin; -- using built in operations
			ELSIF NEGop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= (NOT Ain + "00000000000000000000000000000001"); -- recreating twos compliment
			ELSIF NOTop = '1' THEN 
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= NOT Ain; -- using built in operations
			ELSIF IncPCop = '1' THEN
				ALU_Output(63 DOWNTO 32) <= (OTHERS => '0');
				ALU_Output(31 DOWNTO 0) <= (Ain + "00000000000000000000000000000001"); -- Not sure if this is right ****
			END IF;	
	END PROCESS;
END ARCHITECTURE behavioural;
